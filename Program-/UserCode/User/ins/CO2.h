#ifndef _CO2_H_
#define _CO2_H_
#include "KEY.h"
#define CO2_POWER_ON  P21=1
#define CO2_POWER_OFF P21=0
typedef enum CO2_Cmd_s	
{
	 R_CO2Valu=0x01,                 //ï¿½ï¿½È¡CO2ï¿½ï¿½Öµ
	 Calibrate_Single=0x03,          //ï¿½ï¿½ï¿½ï¿½Ð£ï¿½ï¿½
	 R_Version_Num=0x1e,             //ï¿½ï¿½ï¿½Ì¼ï¿½ï¿½æ±¾ï¿½ï¿½
	 OnOff_Self_calibrate0=0x10,     //ï¿½ï¿½ï¿½ï¿½ï¿½Í¹Ø±ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð£×¼ï¿½ï¿½ï¿½Ô¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð£×¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	 R_Serial_Num=0x1f,             //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
	
}CO2_Cmd_s;

typedef enum Uart1_Sta_s	
{
	uart_state_wait,                //ï¿½È´ï¿½×´Ì¬
	uart_state_recievebusy,         //ï¿½ï¿½ï¿½ï¿½Ã¦
	uart_state_recievefinish,       //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×´Ì?
	uart_state_send_Coldata,        //
  uart_state_send_Paradata,       //
  uart_state_send_CommandReturn,  //
}Uart1_Sta_s;
void Get_CO2Valu(void);
void Get_CO2_VersionNum(void);
void Recieve_Data_Analysis(void);
uint8_t Get_Cs(uint8_t Lens);    //ï¿½ï¿½È¡Ð£ï¿½ï¿½Öµ
uint16_t Get_Co2Value(void);
extern uint8_t Start_Display_RXData;
void Display_Co2(Co2DisMod_s Dis_Mod);//co2ï¿½ï¿½Ê¾
void CO2_Init(void);
void Get_CO2_Data(void);
#endif


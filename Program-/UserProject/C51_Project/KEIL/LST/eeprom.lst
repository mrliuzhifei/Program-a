C51 COMPILER V9.60.0.0   EEPROM                                                            11/11/2022 18:17:35 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE EEPROM
OBJECT MODULE PLACED IN .\Output\eeprom.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE ..\..\..\UserCode\StdDriver\src\eeprom.c LARGE OPTIMIZE(7,SPEED) BROWSE 
                    -INCDIR(..\..\..\UserCode\Device\Include;..\..\..\UserCode\StdDriver\inc;..\..\..\UserCode\User\ins;..\..\..\UserCode\Std
                    -Driver\src;..\..\..\UserCode\StdDriver\lib) DEBUG OBJECTEXTEND PRINT(.\LST\eeprom.lst) TABS(2) OBJECT(.\Output\eeprom.ob
                    -j)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2020 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Website: http://www.nuvoton.com
   9          //  E-Mail : MicroC-8bit@nuvoton.com
  10          //********************************************************************************************************
             -***
  11          #include "ML51.h"
  12          
  13          
  14          
  15          
  16          
  17          
  18          
  19          /**
  20           * @brief       Write Dataflash as EEPROM,
  21           * @param       u16EPAddr the 16bit EEPROM start address. Any of APROM address can be defined as start add
             -ress (0x3800)
  22           * @param       u8EPData the 8bit value need storage in (0x3800)
  23           * @return      none
  24           * @details     Storage dataflash page data into XRAM 380H-400H, modify data in XRAM, Erase dataflash page
             -, writer updated XRAM data into dataflash
  25           */
  26          void Write_DATAFLASH_BYTE(unsigned int u16EPAddr, unsigned char u8EPData)
  27          {
  28   1          unsigned char looptmp = 0;
  29   1          unsigned int u16_addrl_r;
  30   1          unsigned int RAMtmp;
  31   1      
  32   1          //Check page start address
  33   1          u16_addrl_r = (u16EPAddr / 128) * 128;
  34   1      
  35   1          //Save APROM data to XRAM0
  36   1          for (looptmp = 0; looptmp < 0x80; looptmp++)
  37   1          {
  38   2              RAMtmp = Read_APROM_BYTE((unsigned int code *)(u16_addrl_r + looptmp));
  39   2              page_buffer[looptmp] = RAMtmp;
  40   2          }
  41   1      
  42   1          // Modify customer data in XRAM
  43   1          page_buffer[u16EPAddr & 0x7f] = u8EPData;
C51 COMPILER V9.60.0.0   EEPROM                                                            11/11/2022 18:17:35 PAGE 2   

  44   1      
  45   1          //Erase APROM DATAFLASH page
  46   1          IAPAL = u16_addrl_r & 0xff;
  47   1          IAPAH = (u16_addrl_r >> 8) & 0xff;
  48   1          IAPFD = 0xFF;
  49   1          set_CHPCON_IAPEN;
  50   1          set_IAPUEN_APUEN;
  51   1          IAPCN = 0x22;
  52   1          set_IAPTRG_IAPGO;
  53   1      
  54   1          //Save changed RAM data to APROM DATAFLASH
  55   1          set_CHPCON_IAPEN;
  56   1          set_IAPUEN_APUEN;
  57   1          IAPCN = 0x21;
  58   1      
  59   1          for (looptmp = 0; looptmp < 0x80; looptmp++)
  60   1          {
  61   2              IAPAL = (u16_addrl_r & 0xff) + looptmp;
  62   2              IAPAH = (u16_addrl_r >> 8) & 0xff;
  63   2              IAPFD = page_buffer[looptmp];
  64   2              set_IAPTRG_IAPGO;
  65   2          }
  66   1      
  67   1          clr_IAPUEN_APUEN;
  68   1          clr_CHPCON_IAPEN;
  69   1      }
  70          
  71          
  72          //-------------------------------------------------------------------------
  73          void Write_DATAFLASH_ARRAY(unsigned int u16_addr, unsigned char *pDat, unsigned int num)
  74          {
  75   1          unsigned char CPageAddr, EPageAddr, cnt;
  76   1          CPageAddr = u16_addr >> 7;
  77   1          EPageAddr = (u16_addr + num) >> 7;
  78   1      
  79   1          while (CPageAddr != EPageAddr)
  80   1          {
  81   2              cnt = WriteDataToOnePage(u16_addr, pDat, 128);
  82   2              u16_addr += cnt;
  83   2              pDat += cnt;
  84   2              num -= cnt;
  85   2              CPageAddr = u16_addr >> 7;
  86   2          }
  87   1      
  88   1          if (num)
  89   1          {
  90   2              WriteDataToOnePage(u16_addr, pDat, num);
  91   2          }
  92   1      }
  93          //-------------------------------------------------------------------------
  94          void Read_DATAFLASH_ARRAY(unsigned int u16_addr, unsigned char *pDat, unsigned int num)
  95          {
  96   1          unsigned int i;
  97   1      
  98   1          for (i = 0; i < num; i++)
  99   1              pDat[i] = *(unsigned char code *)(u16_addr + i);
 100   1      }
 101          
 102          //--------------------------------------------------------------------------------------------------------
             ----
 103          unsigned char WriteDataToOnePage(unsigned int u16_addr, const unsigned char *pDat, unsigned char num)
 104          {
C51 COMPILER V9.60.0.0   EEPROM                                                            11/11/2022 18:17:35 PAGE 3   

 105   1          unsigned char i, offset;
 106   1          unsigned char code *pCode;
 107   1          unsigned char xdata xd_tmp[128];
 108   1      
 109   1          set_CHPCON_IAPEN;
 110   1          set_IAPUEN_APUEN;
 111   1      
 112   1          offset = u16_addr & 0x007F;
 113   1          i = PAGE_SIZE - offset;
 114   1      
 115   1          if (num > i)num = i;
 116   1      
 117   1          pCode = (unsigned char code *)u16_addr;
 118   1      
 119   1          for (i = 0; i < num; i++)
 120   1          {
 121   2              if (pCode[i] != 0xFF)break;
 122   2          }
 123   1      
 124   1          if (i == num)
 125   1          {
 126   2              IAPCN = BYTE_PROGRAM_APROM;
 127   2              IAPAL = u16_addr;
 128   2              IAPAH = u16_addr >> 8;
 129   2      
 130   2              for (i = 0; i < num; i++)
 131   2              {
 132   3                  IAPFD = pDat[i];
 133   3                  set_IAPTRG_IAPGO;
 134   3                  IAPAL++;
 135   3              }
 136   2      
 137   2              for (i = 0; i < num; i++)
 138   2              {
 139   3                  if (pCode[i] != pDat[i])break;
 140   3              }
 141   2      
 142   2              if (i != num) goto WriteDataToPage20;
 143   2          }
 144   1          else
 145   1          {
 146   2      WriteDataToPage20:
 147   2              pCode = (unsigned char code *)(u16_addr & 0xff80);
 148   2      
 149   2              for (i = 0; i < 128; i++)
 150   2              {
 151   3                  xd_tmp[i] = pCode[i];
 152   3              }
 153   2      
 154   2              for (i = 0; i < num; i++)
 155   2              {
 156   3                  xd_tmp[offset + i] = pDat[i];
 157   3              }
 158   2      
 159   2              do
 160   2              {
 161   3                  IAPAL = (u16_addr & 0xff80);
 162   3                  IAPAH = u16_addr >> 8;
 163   3                  IAPCN = PAGE_ERASE_APROM;
 164   3                  IAPFD = 0xFF;
 165   3                  set_IAPTRG_IAPGO;
 166   3                  IAPCN = BYTE_PROGRAM_APROM;
C51 COMPILER V9.60.0.0   EEPROM                                                            11/11/2022 18:17:35 PAGE 4   

 167   3      
 168   3                  for (i = 0; i < 128; i++)
 169   3                  {
 170   4                      IAPFD = xd_tmp[i];
 171   4                      set_IAPTRG_IAPGO;
 172   4                      IAPAL++;
 173   4                  }
 174   3      
 175   3                  for (i = 0; i < 128; i++)
 176   3                  {
 177   4                      if (pCode[i] != xd_tmp[i])break;
 178   4                  }
 179   3              } while (i != 128);
 180   2      
 181   2          }
 182   1      
 183   1          clr_CHPCON_IAPEN;
 184   1      
 185   1          return num;
 186   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1349    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----     161
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)

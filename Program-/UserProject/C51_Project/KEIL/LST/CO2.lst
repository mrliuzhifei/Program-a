C51 COMPILER V9.60.0.0   CO2                                                               11/11/2022 18:17:36 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CO2
OBJECT MODULE PLACED IN .\Output\CO2.obj
COMPILER INVOKED BY: d:\Keil_v5\C51\BIN\C51.EXE ..\..\..\UserCode\User\src\CO2.c LARGE OPTIMIZE(7,SPEED) BROWSE INCDIR(.
                    -.\..\..\UserCode\Device\Include;..\..\..\UserCode\StdDriver\inc;..\..\..\UserCode\User\ins;..\..\..\UserCode\StdDriver\s
                    -rc;..\..\..\UserCode\StdDriver\lib) DEBUG OBJECTEXTEND PRINT(.\LST\CO2.lst) TABS(2) OBJECT(.\Output\CO2.obj)

line level    source

   1          #include "ML51.h"
   2          #include "BC3602.h"
   3          #define BC3602_RX
   4          uint8_t Start_Display_RXData = 0;
   5          typedef struct CO2_Send_Data_t
   6          {
   7            uint8_t SendBuf[10]; //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
   8            uint8_t SendHead;  //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö¡Í·
   9            uint8_t SendLen;   //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý³ï¿½ï¿½ï¿½
  10            CO2_Cmd_s SendCmd;   //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ýµï¿½ï¿½ï¿½ï¿½ï¿½
  11            uint8_t SendCs;    //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ýµï¿½Ð£ï¿½ï¿½ï¿½
  12          } CO2_Send_Data_t;
  13          
  14          typedef struct CO2_Read_Data_t
  15          {
  16            uint8_t ReadBuf[15];  //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
  17            uint8_t CO2DataBuf[15]; //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
  18            uint8_t ReadHead;   //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ö¡Í·
  19            uint8_t ReadLen;    //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ý³ï¿½ï¿½ï¿½
  20            CO2_Cmd_s ReadCmd;    //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ýµï¿½ï¿½ï¿½ï¿½ï¿½
  21            uint8_t ReadCs;     //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ýµï¿½Ð£ï¿½ï¿½ï¿½
  22          
  23          } CO2_Read_Data_t;
  24          
  25          typedef struct CO2_Data_t
  26          {
  27            CO2_Send_Data_t CO2_Send_Data;
  28            CO2_Read_Data_t CO2_Read_Data;
  29            uint16_t CO2Value;
  30            Uart1_Sta_s Uart1_Sta;
  31            uint8_t Recieve_count;
  32            uint8_t uart_recievedate_temp; //ï¿½ï¿½ï¿½Ú½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
  33          } CO2_Data_t;
  34          
  35          CO2_Data_t CO2_Data;
  36          #define JBE CO2_Data
  37          
  38          void CO2_Init(void)
  39          {
  40   1        GPIO_SetMode(Port2, BIT1, GPIO_MODE_PUSHPULL);
  41   1        CO2_POWER_ON;          //ï¿½ò¿ª¶ï¿½ï¿½ï¿½ï¿½ï¿½Ì¼
  42   1      }
  43          
  44          void Get_CO2Valu(void)
  45          {
  46   1      
  47   1        JBE.CO2_Send_Data.SendHead = 0x11;
  48   1        JBE.CO2_Send_Data.SendLen = 0x01;
  49   1        JBE.CO2_Send_Data.SendCmd = R_CO2Valu;
  50   1        JBE.CO2_Send_Data.SendCs = 256 - (JBE.CO2_Send_Data.SendHead + JBE.CO2_Send_Data.SendLen + JBE.CO2_Send_D
             -ata.SendCmd);
  51   1        JBE.CO2_Send_Data.SendBuf[0] = JBE.CO2_Send_Data.SendHead;
  52   1        JBE.CO2_Send_Data.SendBuf[1] = JBE.CO2_Send_Data.SendLen;
C51 COMPILER V9.60.0.0   CO2                                                               11/11/2022 18:17:36 PAGE 2   

  53   1        JBE.CO2_Send_Data.SendBuf[2] = JBE.CO2_Send_Data.SendCmd;
  54   1        JBE.CO2_Send_Data.SendBuf[3] = JBE.CO2_Send_Data.SendCs;
  55   1        if (JBE.Uart1_Sta == uart_state_wait)
  56   1          Uart1senddata(&JBE.CO2_Send_Data.SendBuf[0], JBE.CO2_Send_Data.SendLen + 3);
  57   1      }
  58          
  59          void Get_CO2_VersionNum(void)
  60          {
  61   1        JBE.CO2_Send_Data.SendHead = 0x11;
  62   1        JBE.CO2_Send_Data.SendLen = 0x01;
  63   1        JBE.CO2_Send_Data.SendCmd = R_Version_Num;
  64   1        JBE.CO2_Send_Data.SendCs = 256 - (JBE.CO2_Send_Data.SendHead + JBE.CO2_Send_Data.SendLen + JBE.CO2_Send_D
             -ata.SendCmd);
  65   1        JBE.CO2_Send_Data.SendBuf[0] = JBE.CO2_Send_Data.SendHead;
  66   1        JBE.CO2_Send_Data.SendBuf[1] = JBE.CO2_Send_Data.SendLen;
  67   1        JBE.CO2_Send_Data.SendBuf[2] = JBE.CO2_Send_Data.SendCmd;
  68   1        JBE.CO2_Send_Data.SendBuf[3] = JBE.CO2_Send_Data.SendCs;
  69   1        if (JBE.Uart1_Sta == uart_state_wait)
  70   1          Uart1senddata(&JBE.CO2_Send_Data.SendBuf[0], JBE.CO2_Send_Data.SendLen + 3);
  71   1      }
  72          
  73          /* UART1 interrupt subroutine */
  74          void UART1_ISR(void) interrupt 15
  75          {
  76   1        _push_(SFRS);
  77   1        if (RI_1)
  78   1        {
  79   2          JBE.uart_recievedate_temp = SBUF1;
  80   2          if (JBE.Uart1_Sta == uart_state_wait)
  81   2          {
  82   3            if (JBE.uart_recievedate_temp == 0x16) //ï¿½ï¿½ï¿½Õµï¿½ï¿½ï¿½Ö¡Í·
  83   3            {
  84   4              memset(&JBE.CO2_Read_Data.ReadBuf, 0, sizeof(JBE.CO2_Read_Data.ReadBuf)); //ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿
             -½ï¿½ï¿½ï¿½
  85   4              JBE.CO2_Read_Data.ReadBuf[0] = JBE.uart_recievedate_temp;
  86   4              JBE.Uart1_Sta = uart_state_recievebusy;
  87   4            }
  88   3          }
  89   2          else if (JBE.Uart1_Sta == uart_state_recievebusy)
  90   2          {
  91   3            JBE.Recieve_count++;
  92   3            JBE.CO2_Read_Data.ReadBuf[JBE.Recieve_count] = JBE.uart_recievedate_temp;
  93   3            if (JBE.Recieve_count == (JBE.CO2_Read_Data.ReadBuf[1] + 2))
  94   3            {
  95   4              JBE.Uart1_Sta = uart_state_recievefinish; //ï¿½ï¿½ï¿½Õµï¿½ï¿½Ä¸ï¿½ï¿½ï¿½ï¿½ïµ½ï¿½ï¿½ï¿½Ôºï¿½ï¿½ï¿½ï¿½ï
             -¿½ï¿½ï¿½ï¿½
  96   4            }
  97   3          }
  98   2      
  99   2          RI_1 = 0; /* clear reception flag for next reception */
 100   2        }
 101   1        _pop_(SFRS);
 102   1      }
 103          
 104          void Recieve_Data_Analysis(void)
 105          {
 106   1        static uint16_t Times = 0;
 107   1        if (JBE.Uart1_Sta == uart_state_recievefinish)
 108   1        {
 109   2      
 110   2          if (Get_Cs(JBE.Recieve_count) == JBE.CO2_Read_Data.ReadBuf[JBE.Recieve_count])
 111   2          {
C51 COMPILER V9.60.0.0   CO2                                                               11/11/2022 18:17:36 PAGE 3   

 112   3            memcpy(JBE.CO2_Read_Data.CO2DataBuf, JBE.CO2_Read_Data.ReadBuf, 15);
 113   3            JBE.Uart1_Sta = uart_state_wait;
 114   3            JBE.CO2Value = JBE.CO2_Read_Data.CO2DataBuf[3] * 256 + JBE.CO2_Read_Data.CO2DataBuf[4];
 115   3            JBE.Recieve_count = 0;
 116   3            Times = 0;
 117   3          }
 118   2          else
 119   2          {
 120   3            JBE.Uart1_Sta = uart_state_wait;
 121   3            JBE.Recieve_count = 0;
 122   3            Times = 0;
 123   3          }
 124   2        }
 125   1        else if (JBE.Uart1_Sta != uart_state_wait)
 126   1        {
 127   2          Times++;
 128   2          if (Times > 1000)
 129   2          {
 130   3            JBE.Uart1_Sta = uart_state_wait;
 131   3            JBE.Recieve_count = 0;
 132   3            Times = 0;
 133   3          }
 134   2        }
 135   1      }
 136          
 137          uint8_t Get_Cs(uint8_t Lens)
 138          {
 139   1        uint16_t Sum = 0;
 140   1        uint8_t i = 0;
 141   1        uint8_t Cs_r = 0;
 142   1        for (i = 0; i < Lens; i++)
 143   1        {
 144   2          Sum = Sum + JBE.CO2_Read_Data.ReadBuf[i];
 145   2        }
 146   1        Cs_r = 256 - Sum;
 147   1        return Cs_r;
 148   1      }
 149          
 150          void Display_Co2(Co2DisMod_s Dis_Mod)
 151          {
 152   1        uint8_t co2gw, co2sw, co2bw, co2qw;
 153   1        uint16_t C02Value_Dis;
 154   1      #ifdef BC3602_RX
 155   1        static uint8_t Time_Reflash = 0, i;
 156   1        if (Start_Display_RXData == True)
 157   1        {
 158   2          Time_Reflash++;
 159   2          if (Time_Reflash <= 2)
 160   2          {
 161   3            co2qw = RF_RXFIFOSAVE[i] / 1000;
 162   3            co2bw = RF_RXFIFOSAVE[i] % 1000 / 100;
 163   3            co2sw = RF_RXFIFOSAVE[i] % 100 / 10;
 164   3            co2gw = RF_RXFIFOSAVE[i] % 10;
 165   3            if (RF_RXFIFOSAVE[i] < 10)
 166   3            {
 167   4              ShowDigit(4, co2gw, 0);
 168   4              LCD_SetOnePixel(0, 2, Disable);
 169   4              LCD_SetOnePixel(1, 2, Disable);
 170   4              LCD_SetOnePixel(2, 2, Disable);
 171   4              LCD_SetOnePixel(3, 2, Disable);
 172   4      
 173   4              LCD_SetOnePixel(1, 1, Disable);
C51 COMPILER V9.60.0.0   CO2                                                               11/11/2022 18:17:36 PAGE 4   

 174   4              LCD_SetOnePixel(2, 1, Disable);
 175   4              LCD_SetOnePixel(3, 1, Disable);
 176   4      
 177   4              LCD_SetOnePixel(0, 4, Disable);
 178   4              LCD_SetOnePixel(1, 4, Disable);
 179   4              LCD_SetOnePixel(2, 4, Disable);
 180   4              LCD_SetOnePixel(3, 4, Disable);
 181   4      
 182   4              LCD_SetOnePixel(0, 3, Disable);
 183   4              LCD_SetOnePixel(1, 3, Disable);
 184   4              LCD_SetOnePixel(2, 3, Disable);
 185   4              LCD_SetOnePixel(3, 3, Disable);
 186   4      
 187   4              LCD_SetOnePixel(0, 6, Disable);
 188   4              LCD_SetOnePixel(1, 6, Disable);
 189   4              LCD_SetOnePixel(2, 6, Disable);
 190   4              LCD_SetOnePixel(3, 6, Disable);
 191   4      
 192   4              LCD_SetOnePixel(1, 24, Disable);
 193   4              LCD_SetOnePixel(2, 24, Disable);
 194   4              LCD_SetOnePixel(3, 24, Disable);
 195   4            }
 196   3            if (RF_RXFIFOSAVE[i] >= 10 && RF_RXFIFOSAVE[i] < 100)
 197   3            {
 198   4              ShowDigit(4, co2gw, 0);
 199   4              ShowDigit(3, co2sw, 0);
 200   4              LCD_SetOnePixel(0, 2, Disable);
 201   4              LCD_SetOnePixel(1, 2, Disable);
 202   4              LCD_SetOnePixel(2, 2, Disable);
 203   4              LCD_SetOnePixel(3, 2, Disable);
 204   4      
 205   4              LCD_SetOnePixel(1, 1, Disable);
 206   4              LCD_SetOnePixel(2, 1, Disable);
 207   4              LCD_SetOnePixel(3, 1, Disable);
 208   4      
 209   4              LCD_SetOnePixel(0, 4, Disable);
 210   4              LCD_SetOnePixel(1, 4, Disable);
 211   4              LCD_SetOnePixel(2, 4, Disable);
 212   4              LCD_SetOnePixel(3, 4, Disable);
 213   4      
 214   4              LCD_SetOnePixel(1, 3, Disable);
 215   4              LCD_SetOnePixel(2, 3, Disable);
 216   4              LCD_SetOnePixel(3, 3, Disable);
 217   4            }
 218   3            if (RF_RXFIFOSAVE[i] >= 100 && RF_RXFIFOSAVE[i] < 1000)
 219   3            {
 220   4              ShowDigit(4, co2gw, 0);
 221   4              ShowDigit(3, co2sw, 0);
 222   4              ShowDigit(2, co2bw, 0);
 223   4      
 224   4              LCD_SetOnePixel(0, 2, Disable);
 225   4              LCD_SetOnePixel(1, 2, Disable);
 226   4              LCD_SetOnePixel(2, 2, Disable);
 227   4              LCD_SetOnePixel(3, 2, Disable);
 228   4      
 229   4              LCD_SetOnePixel(1, 1, Disable);
 230   4              LCD_SetOnePixel(2, 1, Disable);
 231   4              LCD_SetOnePixel(3, 1, Disable);
 232   4            }
 233   3            if (RF_RXFIFOSAVE[i] >= 1000)
 234   3            {
 235   4              ShowDigit(1, co2qw, 0);
C51 COMPILER V9.60.0.0   CO2                                                               11/11/2022 18:17:36 PAGE 5   

 236   4              ShowDigit(3, co2sw, 0);
 237   4              ShowDigit(2, co2bw, 0);
 238   4              ShowDigit(4, co2gw, 0);
 239   4            }
 240   3          }
 241   2          else
 242   2          {
 243   3            Time_Reflash = 0;
 244   3            i++;
 245   3            if (i > 24)
 246   3            {
 247   4              Start_Display_RXData = False;
 248   4              i = 0;
 249   4            }
 250   3          }
 251   2        }
 252   1        
 253   1      /*#ifdef BC3602_RX
 254   1      co2qw=RF_RXFIFO[0]/1000;
 255   1      co2bw=RF_RXFIFO[0]%1000/100;
 256   1      co2sw=RF_RXFIFO[0]%100/10;
 257   1      co2gw=RF_RXFIFO[0]%10;
 258   1      ShowDigit(4,co2gw,0);
 259   1      if(C02Value_Dis>=10)  ShowDigit(3, co2sw,0);
 260   1      if(C02Value_Dis>=100) ShowDigit(2, co2bw,0);
 261   1      if(C02Value_Dis>=1000)ShowDigit(1, co2qw,0);*/
 262   1        
 263   1      #else
                if (Dis_Mod == Current_Valu)
                {
                  LCD_SetOnePixel(1, 9, Disable);
                  LCD_SetOnePixel(2, 9, Disable);
                  LCD_SetOnePixel(3, 9, Disable);
                  C02Value_Dis = JBE.CO2Value;
                }
                else if (Dis_Mod == Max_Valu_24h)
                {
                  LCD_SetOnePixel(1, 9, Disable);
                  LCD_SetOnePixel(2, 9, Enable);
                  LCD_SetOnePixel(3, 9, Enable);
                  C02Value_Dis = Get_Max_Valu_CO2_24h();
                }
                else if (Dis_Mod == Avg_Valu_24h)
                {
                  LCD_SetOnePixel(1, 9, Enable);
                  LCD_SetOnePixel(2, 9, Disable);
                  LCD_SetOnePixel(3, 9, Enable);
                  C02Value_Dis = Get_Avg_Valu_CO2_24h();
                }
                co2qw = C02Value_Dis / 1000;
                co2bw = C02Value_Dis % 1000 / 100;
                co2sw = C02Value_Dis % 100 / 10;
                co2gw = C02Value_Dis % 10;
                if (C02Value_Dis < 10)
                {
                  ShowDigit(4, co2gw, 0);
              
                  LCD_SetOnePixel(0, 2, Disable);
                  LCD_SetOnePixel(1, 2, Disable);
                  LCD_SetOnePixel(2, 2, Disable);
                  LCD_SetOnePixel(3, 2, Disable);
              
C51 COMPILER V9.60.0.0   CO2                                                               11/11/2022 18:17:36 PAGE 6   

                  LCD_SetOnePixel(1, 1, Disable);
                  LCD_SetOnePixel(2, 1, Disable);
                  LCD_SetOnePixel(3, 1, Disable);
              
                  LCD_SetOnePixel(0, 4, Disable);
                  LCD_SetOnePixel(1, 4, Disable);
                  LCD_SetOnePixel(2, 4, Disable);
                  LCD_SetOnePixel(3, 4, Disable);
              
                  LCD_SetOnePixel(0, 3, Disable);
                  LCD_SetOnePixel(1, 3, Disable);
                  LCD_SetOnePixel(2, 3, Disable);
                  LCD_SetOnePixel(3, 3, Disable);
              
                  LCD_SetOnePixel(0, 6, Disable);
                  LCD_SetOnePixel(1, 6, Disable);
                  LCD_SetOnePixel(2, 6, Disable);
                  LCD_SetOnePixel(3, 6, Disable);
              
                  LCD_SetOnePixel(1, 24, Disable);
                  LCD_SetOnePixel(2, 24, Disable);
                  LCD_SetOnePixel(3, 24, Disable);
                }
                if (C02Value_Dis >= 10 && C02Value_Dis < 100)
                {
                  ShowDigit(4, co2gw, 0);
                  ShowDigit(3, co2sw, 0);
                  LCD_SetOnePixel(0, 2, Disable);
                  LCD_SetOnePixel(1, 2, Disable);
                  LCD_SetOnePixel(2, 2, Disable);
                  LCD_SetOnePixel(3, 2, Disable);
              
                  LCD_SetOnePixel(1, 1, Disable);
                  LCD_SetOnePixel(2, 1, Disable);
                  LCD_SetOnePixel(3, 1, Disable);
              
                  LCD_SetOnePixel(0, 4, Disable);
                  LCD_SetOnePixel(1, 4, Disable);
                  LCD_SetOnePixel(2, 4, Disable);
                  LCD_SetOnePixel(3, 4, Disable);
              
                  LCD_SetOnePixel(1, 3, Disable);
                  LCD_SetOnePixel(2, 3, Disable);
                  LCD_SetOnePixel(3, 3, Disable);
                }
                if (C02Value_Dis >= 100 && C02Value_Dis < 1000)
                {
                  ShowDigit(4, co2gw, 0);
                  ShowDigit(3, co2sw, 0);
                  ShowDigit(2, co2bw, 0);
              
                  LCD_SetOnePixel(0, 2, Disable);
                  LCD_SetOnePixel(1, 2, Disable);
                  LCD_SetOnePixel(2, 2, Disable);
                  LCD_SetOnePixel(3, 2, Disable);
              
                  LCD_SetOnePixel(1, 1, Disable);
                  LCD_SetOnePixel(2, 1, Disable);
                  LCD_SetOnePixel(3, 1, Disable);
                }
                if (C02Value_Dis >= 1000)
                {
C51 COMPILER V9.60.0.0   CO2                                                               11/11/2022 18:17:36 PAGE 7   

                  ShowDigit(1, co2qw, 0);
                  ShowDigit(3, co2sw, 0);
                  ShowDigit(2, co2bw, 0);
                  ShowDigit(4, co2gw, 0);
                }
              #endif
 366   1      }
*** WARNING C280 IN LINE 150 OF ..\..\..\UserCode\User\src\CO2.c: 'Dis_Mod': unreferenced local variable
*** WARNING C280 IN LINE 153 OF ..\..\..\UserCode\User\src\CO2.c: 'C02Value_Dis': unreferenced local variable
 367          
 368          uint16_t Get_Co2Value(void)
 369          {
 370   1        return JBE.CO2Value;
 371   1      }
 372          
 373          void Get_CO2_Data(void)
 374          {
 375   1        switch (Sys_MODE)
 376   1        {
 377   2        case Sys_MODE_ACPower:
 378   2          CO2_POWER_ON;
 379   2          Get_CO2Valu();
 380   2          break;
 381   2        case Sys_MODE_BATPower:
 382   2          CO2_POWER_ON;
 383   2          Get_CO2Valu();
 384   2          break;
 385   2        case Sys_MODE_BATPowerLow:
 386   2          CO2_POWER_OFF;
 387   2          break;
 388   2        default:
 389   2      
 390   2          break;
 391   2        }
 392   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1366    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     58       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
